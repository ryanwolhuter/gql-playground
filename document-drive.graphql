scalar Unknown

type FolderNode {
  id: String!
  name: String!
  kind: String!
  parentFolder: String
}

type FileNode {
  id: String!
  name: String!
  kind: String!
  documentType: String!
  parentFolder: String
}

union Node = FolderNode | FileNode

type DocumentDriveState {
  name: String!
  nodes: [Node!]!
  icon: String
}

type ListenerFilter {
  documentType: [String!]
  documentId: [ID!]
  scope: [String!]
  branch: [String!]
}

enum TransmitterType {
  Internal
  SwitchboardPush
  PullResponder
  SecureConnect
  MatrixConnect
  RESTWebhook
}

type ListenerCallInfo {
  transmitterType: TransmitterType
  name: String
  data: String
}

type Listener {
  listenerId: ID!
  label: String
  block: Boolean!
  system: Boolean!
  filter: ListenerFilter!
  callInfo: ListenerCallInfo
}

enum TriggerType {
  PullResponder
}

type PullResponderTriggerData {
  listenerId: ID!
  url: String!
  interval: String!
}

union TriggerData = PullResponderTriggerData

type Trigger {
  id: ID!
  type: TriggerType!
  data: TriggerData
}

type DocumentDriveLocalState {
  sharingType: String
  availableOffline: Boolean!
  listeners: [Listener!]!
  triggers: [Trigger!]!
}

# Node

input AddFileInput {
  id: ID!
  name: String!
  documentType: String!
  parentFolder: ID
}

input AddFolderInput {
  id: ID!
  name: String!
  parentFolder: ID
}

input DeleteNodeInput {
  id: ID!
}

input UpdateFileInput {
  id: ID!
  parentFolder: ID
  name: String
  documentType: String
}

input UpdateNodeInput {
  id: ID!
  parentFolder: ID
  name: String
}

input CopyNodeInput {
  srcId: ID!
  targetId: ID!
  targetName: String
  targetParentFolder: ID
}

input MoveNodeInput {
  srcFolder: ID!
  targetParentFolder: ID
}

# Drive

input SetDriveNameInput {
  name: String!
}

input SetSharingTypeInput {
  type: String!
}

input SetDriveIconInput {
  icon: String!
}

input SetAvailableOfflineInput {
  availableOffline: Boolean!
}

input AddListenerInput {
  listener: Listener!
}

input RemoveListenerInput {
  listenerId: String!
}

input AddTriggerInput {
  trigger: Trigger!
}

input RemoveTriggerInput {
  triggerId: String!
}
